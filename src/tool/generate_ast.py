# Use this Python file to generate "expr.go"

# https://craftinginterpreters.com/appendix-ii.html
# https://github.com/munificent/craftinginterpreters/blob/master/java/com/craftinginterpreters/tool/GenerateAst.java

import os


def java_to_go(types: list[str]) -> list[list[str]]:
    go = []
    for kv in types:
        go.append([])

        key, vs = kv.split(":")
        go[-1].append(key.strip())

        values = vs.strip().split(",")
        for value in values:
            t, m = value.strip().split(" ")
            t = t.strip()  # type
            m = m.strip()  # member
            if t[:4] == "List":
                t = "[]" + t[5:-1]
            elif t[:6] == "Object":
                t = "interface{}"
            go[-1].append([m, t])
    return go


def define_ast(base_name: str, types: list[str]):
    elements = java_to_go(types)
    # print("Decode:", elements)

    f = []  # file content

    def a(s: str = ""):
        for i in range(len(s)):
            if s[i] == " ":
                s = s[:i] + "\t" + s[i + 1 :]
            else:
                break
        f.append(s)

    a("package glox")
    a()
    a("// This code is generated by a Python script.")
    a()
    a("type {} interface".format(base_name[0].upper() + base_name[1:]) + " {")
    a(" Accept(visitor Visitor) interface{}")
    a("}")
    a()

    a("type Visitor interface {")
    for el in elements:
        s = "\t" + "visit" + el[0] + base_name[0].upper() + base_name[1:]
        s += "(" + el[0].lower() + " *" + el[0] + ") interface{}"
        a(s)
    a("}")
    a()

    for el in elements:
        a("type {} struct".format(el[0]) + " {")
        for eel in el[1:]:
            star = (
                "*"
                if eel[1][0] != "["
                and eel[1] != "interface{}"
                and eel[1].lower() != base_name
                else ""
            )
            a("\t{} {}{}".format(eel[0], star, eel[1]))
        a("}")
        a()

        constructor_arg_list = ""
        for eel in el[1:]:
            star = (
                "*"
                if eel[1][0] != "["
                and eel[1] != "interface{}"
                and eel[1].lower() != base_name
                else ""
            )
            constructor_arg_list += "{} {}{}, ".format(eel[0], star, eel[1])
        constructor_arg_list = constructor_arg_list[:-2]
        a("func New{0}({1}) *{0}".format(el[0], constructor_arg_list) + " {")
        a("\t{} := new({})".format(el[0].lower(), el[0]))
        for eel in el[1:]:
            a("\t{0}.{1} = {1}".format(el[0].lower(), eel[0]))
        a("\treturn {}".format(el[0].lower()))
        a("}")
        a()

        a(
            "func ({} *{}) Accept(visitor Visitor)".format(el[0].lower(), el[0])
            + " interface{} {"
        )
        a(
            "\treturn visitor.visit{}{}({})".format(
                el[0], base_name[0].upper() + base_name[1:], el[0].lower()
            )
        )
        a("}")
        a()

    # ========================

    # print("=====")
    # for line in f:
    #     print(line)
    # print("=====")

    print("======= WARNING =======")
    file_path = os.path.abspath("../" + base_name + ".go")
    print('The program will generate file in: "{}".'.format(file_path))
    input("Continue or Ctrl+C: ")
    with open(file_path, "w") as file:
        for line in f:
            file.write(line)
            file.write("\n")
    print('Done! Use "gofmt" or IDE to format the output file!')


def main():
    define_ast(
        "expr",
        [
            "Assign   : Token name, Expr value",
            "Binary   : Expr left, Token operator, Expr right",
            "Call     : Expr callee, Token paren, List<Expr> arguments",
            "Get      : Expr object, Token name",
            "Grouping : Expr expression",
            "Literal  : Object value",
            "Logical  : Expr left, Token operator, Expr right",
            "Set      : Expr object, Token name, Expr value",
            "Super    : Token keyword, Token method",
            "This     : Token keyword",
            "Unary    : Token operator, Expr right",
            "Variable : Token name",
        ],
    )
    pass


if __name__ == "__main__":
    main()
